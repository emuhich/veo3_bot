import uuid
from io import BytesIO
from pathlib import Path
from typing import Union

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from admin_panel.telebot.models import Client, VideoGeneration
from tgbot.config import Config
from tgbot.keyboards.inline import video_format_kb, side_orientation_kb, back_to_menu_kb, wait_photo_kb, video_count_kb, \
    back_to_choice_format_kb, back_to_side_kb
from tgbot.misc.states import States
from tgbot.models.db_commands import AsyncDatabaseOperations, select_client
from admin_panel.config import config as main_config

video_router = Router()


@video_router.callback_query(F.data == "generate_video")
async def start_generate_video(call: CallbackQuery):
    await call.answer(—Åache_time=1)
    text = (
        "üí° Fast version ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –¥—ë—à–µ–≤–æ (–¥–æ 5 —Å–µ–∫, –±–µ–∑ –æ–∑–≤—É—á–∫–∏).\n\n"
        "üöÄ Ultra version ‚Äî –º–∞–∫—Å–∏–º—É–º –∫–∞—á–µ—Å—Ç–≤–∞, –¥–æ 8 —Å–µ–∫, —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–∑–≤—É—á–∫–∞.\n\n"
    )
    await call.message.edit_text(text=text, reply_markup=await video_format_kb())


@video_router.callback_query(F.data == "fast_version")
@video_router.callback_query(F.data == "quality_version")
async def choose_video_format(call: CallbackQuery, state: FSMContext):
    model_type = 'veo3_fast' if call.data == 'fast_version' else 'veo3'
    await state.update_data(model_type=model_type)
    text_fast = (
        "üí° Fast version ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –¥—ë—à–µ–≤–æ (–¥–æ 5 —Å–µ–∫, –±–µ–∑ –æ–∑–≤—É—á–∫–∏).\n\n"
        "‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {main_config.MainConfig.CONT_MONEY_PER_FAST_VERSION} –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 8 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–∑–≤—É—á–∫–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ: –¥–æ 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 3‚Äì5 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: —É–ª—É—á—à–µ–Ω–Ω–æ–µ\n\n"
        "üìù –í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: 16:9 –∏–ª–∏ 9:16"
    )
    text_ultra = (
        "üöÄ Ultra version ‚Äî –º–∞–∫—Å–∏–º—É–º –∫–∞—á–µ—Å—Ç–≤–∞, –¥–æ 8 —Å–µ–∫, —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–∑–≤—É—á–∫–∞.\n\n"
        "–ü—Ä–µ–º–∏—É–º-–∫–∞—á–µ—Å—Ç–≤–æ –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–∑–≤—É—á–∫–∞:\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {main_config.MainConfig.CONT_MONEY_PER_NORMAL_VERSION} –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 8 —Å–µ–∫\n"
        "‚Ä¢ –û–∑–≤—É—á–∫–∞: —É–ª—É—á—à–µ–Ω–Ω–∞—è\n"
        "‚Ä¢ –§–æ—Ç–æ: 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 5‚Äì7 –º–∏–Ω\n"
        "üìù –í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: 16:9 –∏–ª–∏ 9:16"
    )
    await call.message.edit_text(text=text_fast if call.data == 'fast_version' else text_ultra,
                                 reply_markup=await side_orientation_kb())


@video_router.callback_query(F.data == "side_16_9")
@video_router.callback_query(F.data == "side_9_16")
async def choose_side_orientation(call: CallbackQuery, state: FSMContext):
    side_orientation = '16:9' if call.data == 'side_16_9' else '9:16'
    await state.update_data(side_orientation=side_orientation)
    data = await state.get_data()
    await state.set_state(States.prompt)
    await call.message.edit_text(text="\n".join([
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç: {'Fast Version' if data['model_type'] == 'veo3_fast' else 'Ultra Version'}",
        f"üñº –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {data['side_orientation']}",
        f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ üé§ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.",
    ]), reply_markup=await back_to_choice_format_kb(data.get("model_type")))


@video_router.message(States.prompt, F.content_type.in_(['voice', 'text']))
async def prompt_received(message: Message, state: FSMContext, config: Config):
    data = await state.get_data()
    if message.voice:
        buf = BytesIO()
        file = await message.bot.get_file(message.voice.file_id)
        await message.bot.download(file, buf)
        buf.seek(0)
        try:
            text = await config.tg_bot.gpt_svc.transcribe_bytes(
                buf,
                filename="voice.ogg",
                language="ru"
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return
        await state.update_data(prompt=text)
        await message.answer(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
                             reply_markup=await back_to_side_kb(data.get("side_orientation")))
    else:
        if not message.text:
            await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ üé§ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.",
                                 await back_to_choice_format_kb(data.get("model_type")))
            return
        await state.update_data(prompt=message.text[:500])
    await message.answer("‚ú® –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω!\n\nüì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª).",
                         reply_markup=await wait_photo_kb(data.get("side_orientation")))
    await state.set_state(States.photo)


@video_router.message(States.photo, F.photo)
@video_router.callback_query(States.photo, F.data == "skip_photo")
async def receive_photo(event: Union[Message, CallbackQuery], state: FSMContext):
    # –ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ
    data_state = await state.get_data()
    if isinstance(event, CallbackQuery):
        await event.message.delete()
        await state.update_data(photo_bytes=None, photo_filename=None, photo_mime=None)
        await event.message.answer("‚ú® –°–∫–æ–ª—å–∫–æ —Ä–æ–ª–∏–∫–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å?",
                                   reply_markup=await video_count_kb(data_state.get("side_orientation")))
        return

    # –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    msg: Message = event
    file = await msg.bot.get_file(msg.photo[-1].file_id)
    buf = BytesIO()
    await msg.bot.download(file, buf)
    buf.seek(0)
    data = buf.getvalue()

    ext = Path(file.file_path).suffix.lower() if file.file_path else ".jpg"
    filename = f"{uuid.uuid4().hex}{ext}"
    await state.update_data(
        photo_bytes=data,
        photo_filename=filename,
        photo_mime=f"image/{ext.lstrip('.')}"
    )
    await msg.answer("‚ú® –°–∫–æ–ª—å–∫–æ —Ä–æ–ª–∏–∫–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å?",
                     reply_markup=await video_count_kb(data_state.get("side_orientation")))


@video_router.callback_query(F.data.in_(["vid_cnt_1", "vid_cnt_2", "vid_cnt_3"]))
async def choose_video_count(call: CallbackQuery, state: FSMContext, config: Config):
    count = int(call.data.rsplit("_", 1)[-1])
    await call.message.edit_text(f"–ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {count} –≤–∏–¥–µ–æ...")
    await generate_multiple_videos(call.message, state, config, count)


async def generate_multiple_videos(message: Message, state: FSMContext, config: Config, count: int):
    data = await state.get_data()
    prompt = data.get("prompt")
    model = data.get("model_type")
    aspect = data.get("side_orientation")
    image_bytes = data.get("photo_bytes")
    image_filename = data.get("photo_filename")

    if not prompt or not model or not aspect:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", reply_markup=await back_to_menu_kb())
        await state.set_state(None)
        return

    user: Client = await select_client(message.chat.id)

    per_video_cost = main_config.MainConfig.CONT_MONEY_PER_FAST_VERSION if model == "veo3_fast" else main_config.MainConfig.CONT_MONEY_PER_NORMAL_VERSION
    total_cost = per_video_cost * count

    if user.balance < total_cost:
        need = total_cost - user.balance
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_start")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await message.answer(
            f"üòî –û–π! –ú–æ–Ω–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.\n–ù—É–∂–Ω–æ: {total_cost}, –∞ —É –≤–∞—Å –ø–æ–∫–∞: {user.balance} (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need}).\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üöÄ",
            reply_markup=kb
        )
        await state.set_state(None)
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç –µ–¥–∏–Ω—ã–º –±–ª–æ–∫–æ–º
    user.balance -= total_cost
    user.save(update_fields=["balance"])
    await message.answer(
        f"–°–ø–∏—Å–∞–Ω–æ {total_cost} –º–æ–Ω–µ—Ç –∑–∞ {count} –≤–∏–¥–µ–æ (–ø–æ {per_video_cost} –∑–∞ –∫–∞–∂–¥–æ–µ). –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}."
    )

    await state.set_state(None)

    for idx in range(count):
        progress_msg = await message.answer(f"({idx + 1}/{count}) –ê–¥–∞–ø—Ç–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç ...")
        logger.info(f'Prompt before adaptation: {prompt}')
        try:
            response = await config.tg_bot.veo_svc.generate_video(
                prompt_user=prompt,
                model=model,
                aspect_ratio=aspect,
                image_bytes=image_bytes,
                image_filename=image_filename,
            )
        except Exception as e:
            try:
                await progress_msg.edit_text(
                    f"({idx + 1}/{count}) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏."
                )
            except Exception:
                pass
            # –í–æ–∑–≤—Ä–∞—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–µ—Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            user.refresh_from_db()
            user.balance += per_video_cost
            user.save(update_fields=["balance"])
            await message.answer(
                f"–í–æ–∑–≤—Ä–∞—Ç {per_video_cost} –º–æ–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É). –ë–∞–ª–∞–Ω—Å: {user.balance}."
            )
            continue

        task_id = (response.get("data") or {}).get("taskId")
        if not task_id:
            try:
                await progress_msg.edit_text(f"({idx + 1}/{count}) –û—à–∏–±–∫–∞: –Ω–µ—Ç taskId.")
            except Exception:
                pass
            user.refresh_from_db()
            user.balance += per_video_cost
            user.save(update_fields=["balance"])
            await message.answer(
                f"–í–æ–∑–≤—Ä–∞—Ç {per_video_cost} –º–æ–Ω (–Ω–µ—Ç taskId). –ë–∞–ª–∞–Ω—Å: {user.balance}."
            )
            continue

        try:
            await progress_msg.edit_text("‚åõÔ∏è")
        except Exception:
            pass

        try:
            await AsyncDatabaseOperations.create_object(
                VideoGeneration,
                client=user,
                task_id=task_id,
                message_id=progress_msg.message_id,
                coins_charged=per_video_cost
            )
        except Exception:
            user.refresh_from_db()
            user.balance += per_video_cost
            user.save(update_fields=["balance"])
            try:
                await progress_msg.edit_text(
                    f"({idx + 1}/{count}) –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –í–æ–∑–≤—Ä–∞—Ç {per_video_cost} –º–æ–Ω."
                )
            except Exception:
                pass
            continue

    await message.answer(
        "–í—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
        reply_markup=await back_to_menu_kb()
    )
