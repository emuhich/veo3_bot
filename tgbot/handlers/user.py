from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from admin_panel.telebot.models import Client, Referral
from tgbot.keyboards.inline import menu_kb, back_to_menu_kb
from tgbot.models.db_commands import select_client, create_client, AsyncDatabaseOperations

user_router = Router()

REF_INVITER_REWARD = 3
REF_INVITED_BONUS = 1


@user_router.message(Command(commands=["start"]))
async def user_start(message: Message, state: FSMContext):
    await state.clear()
    ref_code = None
    if message.text and " " in message.text:
        parts = message.text.split(maxsplit=1)
        if len(parts) == 2:
            ref_code = parts[1].strip()

    user: Client = await select_client(message.chat.id)
    is_new = False
    if not user:
        await create_client(
            message.from_user.username,
            message.chat.id,
            message.from_user.url,
            message.from_user.full_name,
        )
        user = await select_client(message.chat.id)
        is_new = True

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not user.referral_code:
        # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ –≤—ã–∑–æ–≤–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º sync (–∫–æ—Ä–æ—Ç–∫–æ)
        from asgiref.sync import sync_to_async
        await sync_to_async(user.ensure_referral_code)()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –∫–æ–¥
    if is_new and ref_code:
        inviters = await AsyncDatabaseOperations.get_objects_filter(Client, referral_code=ref_code)
        inviter = inviters[0] if inviters else None
        if inviter and inviter.id != user.id:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—â—ë –Ω–µ—Ç —Å–≤—è–∑–∏
            existing = await AsyncDatabaseOperations.get_objects_filter(Referral, invited=user)
            if not existing:
                # –°–æ–∑–¥–∞–Ω–∏–µ
                await AsyncDatabaseOperations.create_object(
                    Referral,
                    inviter=inviter,
                    invited=user,
                    reward_coins=REF_INVITER_REWARD,
                    invited_bonus=REF_INVITED_BONUS
                )
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏—è
                inviter.balance += REF_INVITER_REWARD
                inviter.referral_earnings += REF_INVITER_REWARD
                inviter.save(update_fields=["balance", "referral_earnings"])
                user.balance += REF_INVITED_BONUS
                user.save(update_fields=["balance"])

                try:
                    await message.bot.send_message(
                        inviter.telegram_id,
                        f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: @{user.username or user.telegram_id}. "
                        f"+{REF_INVITER_REWARD} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {inviter.balance}"
                    )
                except Exception:
                    pass
                await message.answer(
                    f"–í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{REF_INVITED_BONUS} –º–æ–Ω–µ—Ç–∞(—ã). "
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}"
                )

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Veo3!\n"
        "–ó–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç —Ç—ã —Å–æ–∑–¥–∞—à—å –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ.\n\n"
        "–ß—Ç–æ —É–º–µ—é:\n"
        "‚Ä¢ üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–æ–ª–∏–∫–æ–≤ (3 —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞)\n"
        "‚Ä¢ üñº –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ –∏ —Å—Ç–∏–ª–µ–π\n"
        "‚Ä¢ üîä –û–∑–≤—É—á–∫–∞ (–≤ Ultra/Pro)\n"
        "‚Ä¢ üíé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω."
    )

    await message.answer(text=welcome_text, reply_markup=await menu_kb())


@user_router.callback_query(F.data == "back_to_menu")
async def back_to_manu(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await user_start(call.message, state)


@user_router.callback_query(F.data == "support")
async def support_info(call: CallbackQuery):
    text = (
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n\n"
        "üí¨ Telegram: @market_brains_ai\n"
    )
    await call.message.edit_text(text, reply_markup=await back_to_menu_kb())
